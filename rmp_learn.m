%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Learns a rhythmic movement primitive (RCP) in batch mode %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%clc;close all;clear all;%% Define parameters% global variableglobal rcps;% symbolic variblesyms t; %time% general parametersBATCH      = 1;     % 0 - incremental learning, 1 - batch learningdt         = 0.01;  %ym         = 0;     %A          = 1;     %n_rfs      = 1000;   % 50tau        = 1;     %omega      = 0.01;  % frequencyduration   = 10;    % experiment duration (in sec)dimentions = 2;     % number of conrolled axis% variables arrays for data monitoringtime = [];                                          % timetime_end = [];                                      % end of each experiment%D = zeros(round(duration*tau/dt+1),3,dimentions);  % data: (D = [[t(0) t(1) ...] [position velocity acceleration] [x-axis y-axis]])D = zeros(0,3,dimentions);                          %%% Generate data% for i=0:10*tau/dt%     d(1) = 1 - (2*2^(1/2)*cos(2*pi*dt*i))/(cos(4*pi*dt*i) - 3);%     dd(1) = (4*2^(1/2)*pi*sin(2*pi*dt*i))/(cos(4*pi*dt*i) - 3) - (8*2^(1/2)*pi*cos(2*pi*dt*i)*sin(4*pi*dt*i))/(cos(4*dt*i*pi) - 3)^2;%     ddd(1) = (8*2^(1/2)*pi^2*cos(2*pi*dt*i))/(cos(4*pi*dt*i) - 3) - (64*2^(1/2)*pi^2*cos(2*pi*dt*i)*sin(4*pi*dt*i)^2)/(cos(4*dt*i*pi) - 3)^3 - (32*2^(1/2)*pi^2*cos(2*pi*dt*i)*cos(4*pi*dt*i))/(cos(4*dt*i*pi) - 3)^2 + (32*2^(1/2)*pi^2*sin(2*pi*dt*i)*sin(4*pi*dt*i))/(cos(4*dt*i*pi) - 3)^2;%     d(2) = 2 - (2*sin(4*pi*dt*i))/(cos(4*pi*dt*i) - 3);%     dd(2) = - (8*pi*cos(4*pi*dt*i))/(cos(4*pi*dt*i) - 3) - (8*pi*sin(4*pi*dt*i)^2)/(cos(4*dt*i*pi) - 3)^2;%     ddd(2) = (32*pi^2*sin(4*pi*dt*i))/(cos(4*pi*dt*i) - 3) - (64*pi^2*sin(4*pi*dt*i)^3)/(cos(4*dt*i*pi) - 3)^3 - (96*pi^2*cos(4*pi*dt*i)*sin(4*pi*dt*i))/(cos(4*dt*i*pi) - 3)^2;%     D(i+1,:,1)   = [d(1) dd(1) ddd(1)];%     D(i+1,:,2)   = [d(2) dd(2) ddd(2)];% end% time = (0:dt:tau*10)';% % % add some gausian white noise% D(:,1,:) = D(:,1,:) + randn(size(D(:,1,:))) .* (max(D(:,1,:)) - min(D(:,1,:))) / 50;% D(:,2,:) = D(:,2,:) + randn(size(D(:,2,:))) .* (max(D(:,2,:)) - min(D(:,2,:))) / 50;% D(:,3,:) = D(:,3,:) + randn(size(D(:,3,:))) .* (max(D(:,3,:)) - min(D(:,3,:))) / 50;%% Load dataindx_Time =  1;indx_RawH1 = 2:3;indx_RawH2 = 4:5;indx_PosH1 = 6:7;indx_PosH2 = 8:9;indx_VelH1 = 10:11;indx_VelH2 = 12:13;indx_AccH1 = 14:15;indx_AccH2 = 16:17;indx_PosO1 = 18:19;indx_PosO2 = 20:21;indx_VelO1 = 22:23;indx_VelO2 = 24:25;indx_AccO1 = 26:27;indx_AccO2 = 28:29;indx_K1 = 37;   %% Siffnessindx_K2 = 38;indx_B1 = 39;   %% Dampingindx_B2 = 40;indx_A0 = 41;   %% admittance Objectpathname = [pwd '\MATLAB\data\Chris_Davide\session_1\HMan1_Intermit\'];file_list = dir([pathname '*.mat']);for i = 1:1%length(file_list)    filename = file_list(i).name    load([pathname filename]);    data = data';        d1 = [data(:, indx_PosH1(1)) data(:, indx_VelH1(1)) data(:, indx_AccH1(1))];    d2 = [data(:, indx_PosH1(2)) data(:, indx_VelH1(2)) data(:, indx_AccH1(2))];    l = length(D);    D(l+1:l+length(data),:,1) = d1;    D(l+1:l+length(data),:,2) = d2;    if isempty(time)        time = data(:, indx_Time);    else        time = [time; data(:, indx_Time) + time(end)];    end    time_end = [time_end, time(end)];    max(time)end% numerical derivation of velocity and accelerationD(:,2,1) = [0; diff(D(:,1,1))]/dt;D(:,3,1) = [0; diff(D(:,2,1))]/dt;D(:,2,2) = [0; diff(D(:,1,2))]/dt;D(:,3,2) = [0; diff(D(:,2,2))]/dt;%% Alocate variables for monitoringP   = zeros(length(D),2,dimentions);                    %Z   = zeros(length(D),2,dimentions);                    %Y   = zeros(length(D),3,dimentions);                    %PSI = zeros(length(D),n_rfs,dimentions);                %W   = zeros(length(D),n_rfs,dimentions);                %F   = zeros(length(D),3,dimentions);                    % fit result: (F = [[t(0) t(1) ...] [position velocity acceleration] [x-axis y-axis]])%% Initialize RCPsfor j = 1:dimentions    rcp('init',j,n_rfs,['axis', num2str(j)]);    rcp('reset_state',j);    rcp('set_baseline',j,ym);    rcp('set_amplitude',j,A);end%% Batch fittingif BATCH == 1    for j = 1:dimentions        [F(:,1,j), F(:,2,j), F(:,3,j)] = rcp('batch_fit', j, tau, dt, D(:,1,j), D(:,2,j), D(:,3,j));    end%% Incremental fittingelse    for j = 1:dimentions        for i = 1:length(time)            [F(i,1,j), F(i,2,j), F(i,3,j)] = rcp('run_fit', j, tau, dt, D(i,1,j), D(i,2,j), D(i,3,j));        end    endend%% Reset RCPfor j = 1:dimentions    rcp('reset_state',j);    rcp('set_baseline',j,ym);    rcp('set_amplitude',j,A);end%% Run RCPfor j = 1:dimentions    for i = 1:length(time)        [y,yd,ydd] = rcp('run',j,tau,dt);        P(i,:,j) = [rcps(j).p rcps(j).pd];        Z(i,:,j) = [rcps(j).z rcps(j).zd];        Y(i,:,j) = [y yd ydd];        PSI(i,:,j) = rcps(j).psi';        W(i,:,j) = rcps(j).w';        disp([num2str(((j - 1)/dimentions + i/length(time)/dimentions)*100),'%'])    endend%% Plot% plot position, velocity, acceleration vs. targetfigure(1);clf;hold on;grid on;scatter(D(:,1,1), D(:,1,2), 20, 'b.');%plot(D(:,1,1), D(:,1,2), 'b:', 'linewidth', 2);plot(F(:,1,1), F(:,1,2), 'g--', 'linewidth', 2);plot(Y(:,1,1), Y(:,1,2), 'r-', 'linewidth', 2);legend('data', 'fit', 'run', 'Orientation', 'horizontal', 'FontSize', 11, 'Position', [0.21, 0.95, 0.58, 0.04]);set(gca, 'fontsize', 11);set(gca, 'TickLabelInterpreter', 'latex');xlabel('$x$', 'interpreter', 'latex', 'fontsize', 11);ylabel('$y$', 'interpreter', 'latex', 'fontsize', 11);% figure(11);% subplot(211);% hold on;% grid on;% scatter(time, D(:,1,1), 20, 'b.');% plot(time, F(:,1,1), 'g', 'linewidth', 2);% for i = 1:length(time_end)%     xline(time_end(i), ':', 'linewidth', 1);% end% xlim([0 max(time)]);% set(gca, 'fontsize', 11);% set(gca, 'TickLabelInterpreter', 'latex')% ylabel('$x$', 'interpreter', 'latex', 'fontsize', 11);% subplot(212);% hold on;% grid on;% h1 = scatter(time, D(:,1,2), 20, 'b.');% h2 = plot(time, F(:,1,2), 'g', 'linewidth', 2);% legend([h1, h2], {'data', 'fit'}, 'Orientation', 'horizontal', 'FontSize', 11, 'Position', [0.21, 0.95, 0.58, 0.04]);% for i = 1:length(time_end)%     h_xline = xline(time_end(i), ':', 'linewidth', 1, 'HandleVisibility', 'off');% end% xlim([0 max(time)]);% set(gca, 'fontsize', 11);% set(gca, 'TickLabelInterpreter', 'latex')% xlabel('$t$', 'interpreter', 'latex', 'fontsize', 11);% ylabel('$y$', 'interpreter', 'latex', 'fontsize', 11);% plot position, velocity, acceleration vs. targetfor j = 1:dimentions    figure(j+1);        Dd = [0; diff(D(:,1,j))]/dt;    Ddd1 = [0; diff(Dd)]/dt;    Ddd2 = [0; diff(D(:,2,j))]/dt;        subplot(311);    hold on;    grid on;    scatter(time, D(:,1,j), 20, 'b.');    plot(time, F(:,1,j), 'g--', 'linewidth', 2);    plot(time, Y(:,1,j), 'r-', 'linewidth', 2);    for i = 1:length(time_end)        xline(time_end(i), ':', 'linewidth', 1);    end    xlim([0 max(time)]);    set(gca, 'fontsize', 11);    set(gca, 'TickLabelInterpreter', 'latex')    ylabel(['$y_', num2str(j),'$ [m]'], 'interpreter', 'latex', 'fontsize', 11);        subplot(312);    hold on;    grid on;    scatter(time, D(:,2,j), 20, 'b.');%     plot(time, Dd, 'c:', 'linewidth', 2);    plot(time, F(:,2,j), 'g--', 'linewidth', 2);    plot(time, Y(:,2,j), 'r-', 'linewidth', 2);    for i = 1:length(time_end)        xline(time_end(i), ':', 'linewidth', 1);    end    xlim([0 max(time)]);    set(gca, 'fontsize', 11);    set(gca, 'TickLabelInterpreter', 'latex')    ylabel(['$\dot{y}_', num2str(j),'$ [m/s]'], 'interpreter', 'latex', 'fontsize', 11);        subplot(313);    hold on;    grid on;    h1 = scatter(time, D(:,3,j), 20, 'b.');%     h2 = plot(time, Ddd1, 'c:', 'linewidth', 2);%     plot(time, Ddd2, 'm:', 'linewidth', 2);    h2 = plot(time, F(:,3,j), 'g--', 'linewidth', 2);    h3 = plot(time, Y(:,3,j), 'r-', 'linewidth', 2);    legend([h1, h2, h3], {'data', 'fit', 'run'}, 'Orientation', 'horizontal', 'FontSize', 11, 'Position', [0.21, 0.95, 0.58, 0.04]);    for i = 1:length(time_end)        h_xline = xline(time_end(i), ':', 'linewidth', 1, 'HandleVisibility', 'off');    end    xlim([0 max(time)]);    set(gca, 'fontsize', 11);    set(gca, 'TickLabelInterpreter', 'latex')    xlabel('$t$ [s]', 'interpreter', 'latex', 'fontsize', 11);    ylabel(['$\ddot{y}_', num2str(j),'$ [m/s$^2$]'], 'interpreter', 'latex', 'fontsize', 11);end% plot internal statesfor j = 1:dimentions    figure(dimentions+1+j);    subplot(231);    plot(time,Z(:,1,j));    title('z');    aa=axis;    axis([min(time) max(time) aa(3:4)]);    subplot(232);    plot(time,Z(:,2,j));    title('zd');    aa=axis;    axis([min(time) max(time) aa(3:4)]);    subplot(233);    plot(time,PSI(:,:,j));    title('Weighting Kernels');    aa=axis;    axis([min(time) max(time) aa(3:4)]);    subplot(234);    plot(time,P(:,1,j));    title('p');    aa=axis;    axis([min(time) max(time) aa(3:4)]);    subplot(235);    plot(time,P(:,2,j));    title('pd');    aa=axis;    axis([min(time) max(time) aa(3:4)]);    subplot(236);    plot(W(end,:,j));    title('Weights');    xlabel(sprintf('tau=%f',tau));endfor j = 1:dimentions    for h = 1:3        performance(j,h,1) = immse(Y(:,h,j), D(:,h,j));%         performance(j,h,2) = immse(F(:,h,j), D(:,h,j));%         performance(j,h,3) = immse(Y(:,h,j), F(:,h,j));    end    performance(j,:,:)end